{"version":3,"sources":["Dashobard/Dashboard.jsx","Login/AuthProvider.jsx","MyUrlField/MyUrlField.jsx","User/Users.jsx","Post/Posts.jsx","Post/PostEdit.jsx","Post/PostCreate.jsx","App/App.jsx","serviceWorker.js","index.js"],"names":["Dashboard","react_default","a","createElement","Card_default","CardHeader_default","title","CardContent_default","AuthProvider","type","params","AUTH_LOGIN","username","localStorage","setItem","Promise","resolve","AUTH_LOGOUT","removeItem","AUTH_ERROR","status","reject","AUTH_CHECK","getItem","withStyles","link","textDecoration","icon","width","paddingLeft","_ref","_ref$record","record","source","classes","href","className","Launch_default","UserList","props","List","Datagrid","rowClick","TextField","EmailField","src_MyUrlField_MyUrlField","PostFilter","Filter","TextInput","label","alwaysOn","ReferenceInput","reference","allowEmpty","SelectInput","optionText","PostList","Object","assign","filters","Posts_PostFilter","Responsive","small","SimpleList","primaryText","secondaryText","concat","views","tertiaryText","Date","published_at","toLocaleDateString","medium","ReferenceField","EditButton","PostTitle","PostEdit","Edit","SimpleForm","DisabledInput","LongTextInput","PostCreate","Create","dataProvider","jsonServerProvider","App","Admin","dashboard","authProvider","Resource","name","list","edit","create","PostIcon","UserIcon","Boolean","window","location","hostname","match","ReactDOM","render","src_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qXAwBeA,EAlBG,kBAChBC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,KACED,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAYI,MAAM,4BAClBL,EAAAC,EAAAC,cAACI,EAAAL,EAAD,+zBCFWM,EAAA,SAACC,EAAMC,GACpB,GAAID,IAASE,IAAY,KACfC,EAAaF,EAAbE,SAER,OADAC,aAAaC,QAAQ,WAAYF,GAC1BG,QAAQC,UAGjB,GAAIP,IAASQ,IAEX,OADAJ,aAAaK,WAAW,YACjBH,QAAQC,UAGjB,GAAIP,IAASU,IAAY,KACfC,EAAWV,EAAXU,OACR,OAAe,MAAXA,GAA6B,MAAXA,GACpBP,aAAaK,WAAW,YACjBH,QAAQM,UAGVN,QAAQC,UAGjB,OAAIP,IAASa,IACJT,aAAaU,QAAQ,YACxBR,QAAQC,UACRD,QAAQM,SAGPN,QAAQM,OAAO,kFCbTG,uBAjBA,CACbC,KAAM,CACJC,eAAgB,QAElBC,KAAM,CACJC,MAAO,QACPC,YAAa,IAWFL,CAPI,SAAAM,GAAA,IAAAC,EAAAD,EAAGE,cAAH,IAAAD,EAAY,GAAZA,EAAgBE,EAAhBH,EAAgBG,OAAQC,EAAxBJ,EAAwBI,QAAxB,OACjBjC,EAAAC,EAAAC,cAAA,KAAGgC,KAAMH,EAAOC,GAASG,UAAWF,EAAQT,MACzCO,EAAOC,GACRhC,EAAAC,EAAAC,cAACkC,EAAAnC,EAAD,CAAYkC,UAAWF,EAAQP,UCGpBW,EAZE,SAAAC,GAAK,OACpBtC,EAAAC,EAAAC,cAACqC,EAAA,EAASD,EACRtC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAUC,SAAS,QACjBzC,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAWV,OAAO,SAClBhC,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAAYX,OAAO,UACnBhC,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAWV,OAAO,UAClBhC,EAAAC,EAAAC,cAAC0C,EAAD,CAAYZ,OAAO,YACnBhC,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAWV,OAAO,qGCElBa,EAAa,SAAAP,GAAK,OACtBtC,EAAAC,EAAAC,cAAC4C,EAAA,EAAWR,EACVtC,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAWC,MAAM,SAAShB,OAAO,IAAIiB,UAAQ,IAC7CjD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAgBF,MAAM,OAAOhB,OAAO,SAASmB,UAAU,QAAQC,YAAU,GACvEpD,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CAAaC,WAAW,YAgCfC,EA3BE,SAAAjB,GAAK,OACpBtC,EAAAC,EAAAC,cAACqC,EAAA,EAADiB,OAAAC,OAAA,GAAUnB,EAAV,CAAiBoB,QAAS1D,EAAAC,EAAAC,cAACyD,EAAD,QACxB3D,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,CACEC,MACE7D,EAAAC,EAAAC,cAAC4D,EAAA,EAAD,CACEC,YAAa,SAAAhC,GAAM,OAAIA,EAAO1B,OAC9B2D,cAAe,SAAAjC,GAAM,SAAAkC,OAAOlC,EAAOmC,MAAd,WACrBC,aAAc,SAAApC,GAAM,OAClB,IAAIqC,KAAKrC,EAAOsC,cAAcC,wBAIpCC,OACEvE,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAUC,SAAS,QACjBzC,EAAAC,EAAAC,cAACsE,EAAA,EAAD,CAAgBxC,OAAO,SAASmB,UAAU,SACxCnD,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAWV,OAAO,UAEpBhC,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAWV,OAAO,UAClBhC,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAWV,OAAO,SAClBhC,EAAAC,EAAAC,cAACuE,EAAA,EAAD,+CClCJC,EAAY,SAAA7C,GAAA,IAAGE,EAAHF,EAAGE,OAAH,eAAAkC,OAAyBlC,EAASA,EAAO1B,MAAQ,KAiBpDsE,EAfE,SAAArC,GAAK,OACpBtC,EAAAC,EAAAC,cAAC0E,EAAA,EAADpB,OAAAC,OAAA,CAAMpD,MAAOL,EAAAC,EAAAC,cAACwE,EAAD,OAAmBpC,GAC9BtC,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,KACE7E,EAAAC,EAAAC,cAAC4E,EAAA,EAAD,CAAe9C,OAAO,OAEtBhC,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAgBlB,OAAO,SAASmB,UAAU,SACxCnD,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CAAaC,WAAW,UAG1BtD,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAWf,OAAO,UAClBhC,EAAAC,EAAAC,cAAC6E,EAAA,EAAD,CAAe/C,OAAO,qBCDbgD,EAZI,SAAA1C,GAAK,OACtBtC,EAAAC,EAAAC,cAAC+E,EAAA,EAAW3C,EACVtC,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,KACE7E,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAgBlB,OAAO,SAASmB,UAAU,SACxCnD,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CAAaC,WAAW,UAE1BtD,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAWf,OAAO,UAClBhC,EAAAC,EAAAC,cAAC6E,EAAA,EAAD,CAAe/C,OAAO,YCAtBkD,UAAeC,YAAmB,wCASzBC,EAPH,kBACVpF,EAAAC,EAAAC,cAACmF,EAAA,EAAD,CAAOC,UAAWvF,EAAWwF,aAAchF,EAAc2E,aAAcA,GACrElF,EAAAC,EAAAC,cAACsF,EAAA,EAAD,CAAUC,KAAK,QAAQC,KAAMnC,EAAUoC,KAAMhB,EAAUiB,OAAQZ,EAAYtD,KAAMmE,MACjF7F,EAAAC,EAAAC,cAACsF,EAAA,EAAD,CAAUC,KAAK,QAAQC,KAAMrD,EAAUX,KAAMoE,QCX7BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrG,EAAAC,EAAAC,cAACoG,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.602decdc.chunk.js","sourcesContent":["import React from 'react';\n\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\n\nconst Dashboard = () => (\n  <Card>\n    <CardHeader title=\"Welcome the React Admin\" />\n    <CardContent>\n      Lorem ipsum dolor sit, amet consectetur adipisicing elit. Distinctio voluptatum\n      voluptate perspiciatis veritatis iste, accusamus ad soluta iusto error dignissimos\n       earum sed fugiat! Quos deleniti perferendis provident pariatur mollitia voluptates?\n        Tenetur, eligendi blanditiis! Aspernatur, repellendus natus! Neque deserunt necessitatibus\n         adipisci recusandae est, illum ex maiores! Iure laudantium quibusdam debitis! Nisi\n         doloribus nulla eum voluptas non similique mollitia expedita. Reprehenderit repellat\n         pariatur dolorum velit quisquam accusantium at odit, similique cupiditate praesentium.\n         In, eos doloribus temporibus ea ad adipisci laboriosam neque ipsum nesciunt debitis\n         cumque rem perferendis illo laudantium deleniti alias. Doloremque sit vitae\n         molestiae nisi iusto ex, provident saepe maiores officiis!\n    </CardContent>\n  </Card>\n);\n\nexport default Dashboard;\n","import {\n  AUTH_LOGIN,\n  AUTH_LOGOUT,\n  AUTH_ERROR,\n  AUTH_CHECK,\n} from 'react-admin';\n\nexport default (type, params) => {\n  if (type === AUTH_LOGIN) {\n    const { username } = params;\n    localStorage.setItem('username', username);\n    return Promise.resolve();\n  }\n\n  if (type === AUTH_LOGOUT) {\n    localStorage.removeItem('username');\n    return Promise.resolve();\n  }\n\n  if (type === AUTH_ERROR) {\n    const { status } = params;\n    if (status === 401 || status === 403) {\n      localStorage.removeItem('username');\n      return Promise.reject();\n    }\n\n    return Promise.resolve();\n  }\n\n  if (type === AUTH_CHECK) {\n    return localStorage.getItem('username')\n      ? Promise.resolve()\n      : Promise.reject();\n  }\n\n  return Promise.reject('Unknown method');\n};\n","import React from 'react';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport LaunchIcon from '@material-ui/icons/Launch';\n\nconst styles = {\n  link: {\n    textDecoration: 'none',\n  },\n  icon: {\n    width: '0.5em',\n    paddingLeft: 2,\n  },\n};\n\nconst MyUrlField = ({ record = {}, source, classes }) => (\n  <a href={record[source]} className={classes.link}>\n    {record[source]}\n    <LaunchIcon className={classes.icon} />\n  </a>\n);\n\nexport default withStyles(styles)(MyUrlField);\n","import React from 'react';\nimport {\n  List,\n  Datagrid,\n  TextField,\n  EmailField,\n} from 'react-admin';\nimport MyUrlField from '../MyUrlField/MyUrlField';\n\nconst UserList = props => (\n  <List {...props}>\n    <Datagrid rowClick=\"edit\">\n      <TextField source=\"name\" />\n      <EmailField source=\"email\" />\n      <TextField source=\"phone\" />\n      <MyUrlField source=\"website\" />\n      <TextField source=\"company.name\" />\n    </Datagrid>\n  </List>\n);\n\nexport default UserList;\n","import React from 'react';\n\nimport './index.scss';\n\nimport {\n  List,\n  Responsive,\n  SimpleList,\n  Datagrid,\n  TextField,\n  ReferenceField,\n  EditButton,\n  Filter,\n  TextInput,\n  ReferenceInput,\n  SelectInput,\n} from \"react-admin\";\n\nconst PostFilter = props => (\n  <Filter {...props}>\n    <TextInput label=\"search\" source=\"q\" alwaysOn />\n    <ReferenceInput label=\"User\" source=\"userId\" reference=\"users\" allowEmpty>\n      <SelectInput optionText=\"name\" />\n    </ReferenceInput>\n  </Filter>\n);\n\nconst PostList = props => (\n  <List {...props} filters={<PostFilter />}>\n    <Responsive\n      small={\n        <SimpleList\n          primaryText={record => record.title}\n          secondaryText={record => `${record.views} views`}\n          tertiaryText={record =>\n            new Date(record.published_at).toLocaleDateString()\n          }\n        />\n      }\n      medium={\n        <Datagrid rowClick=\"edit\">\n          <ReferenceField source=\"userId\" reference=\"users\">\n            <TextField source=\"name\" />\n          </ReferenceField>\n          <TextField source=\"title\" />\n          <TextField source=\"body\" />\n          <EditButton />\n        </Datagrid>\n      }\n    />\n  </List>\n);\n\n\nexport default PostList;\n","import React from 'react';\n\nimport {\n  Edit,\n  SimpleForm,\n  DisabledInput,\n  SelectInput,\n  ReferenceInput,\n  TextInput,\n  LongTextInput,\n} from 'react-admin';\n\nconst PostTitle = ({ record }) => `Post: ${record ? record.title : ''}`;\n\nconst PostEdit = props => (\n  <Edit title={<PostTitle />} {...props}>\n    <SimpleForm>\n      <DisabledInput source=\"id\" />\n\n      <ReferenceInput source=\"userId\" reference=\"users\">\n        <SelectInput optionText=\"name\" />\n      </ReferenceInput>\n\n      <TextInput source=\"title\" />\n      <LongTextInput source=\"body\" />\n    </SimpleForm>\n  </Edit>\n);\n\nexport default PostEdit;\n","import React from 'react';\n\nimport {\n  Create,\n  SimpleForm,\n  ReferenceInput,\n  SelectInput,\n  TextInput,\n  LongTextInput,\n} from 'react-admin';\n\nconst PostCreate = props => (\n  <Create {...props}>\n    <SimpleForm>\n      <ReferenceInput source=\"userId\" reference=\"users\">\n        <SelectInput optionText=\"name\" />\n      </ReferenceInput>\n      <TextInput source=\"title\" />\n      <LongTextInput source=\"body\" />\n    </SimpleForm>\n  </Create>\n);\n\nexport default PostCreate;\n","import React from 'react';\n\nimport jsonServerProvider from 'ra-data-json-server';\n\nimport { Admin, Resource } from 'react-admin';\nimport PostIcon from '@material-ui/icons/Book';\nimport UserIcon from '@material-ui/icons/Group';\n\nimport Dashboard from '../Dashobard/Dashboard';\nimport AuthProvider from '../Login/AuthProvider';\nimport UserList from '../User/Users';\nimport PostList from '../Post/Posts';\nimport PostEdit from '../Post/PostEdit';\nimport PostCreate from '../Post/PostCreate';\n\n\nimport './App.css';\n\nconst dataProvider = jsonServerProvider('http://jsonplaceholder.typicode.com');\n\nconst App = () => (\n  <Admin dashboard={Dashboard} authProvider={AuthProvider} dataProvider={dataProvider}>\n    <Resource name=\"posts\" list={PostList} edit={PostEdit} create={PostCreate} icon={PostIcon} />\n    <Resource name=\"users\" list={UserList} icon={UserIcon} />\n  </Admin>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}