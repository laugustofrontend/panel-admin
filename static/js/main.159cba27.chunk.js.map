{"version":3,"sources":["Dashobard/Dashboard.jsx","Login/AuthProvider.jsx","MyUrlField/MyUrlField.jsx","User/Users.jsx","Post/Posts.jsx","Post/PostEdit.jsx","Post/PostCreate.jsx","App/App.jsx","serviceWorker.js","index.js"],"names":["Dashboard","react_default","a","createElement","className","AuthProvider","type","params","AUTH_LOGIN","username","localStorage","setItem","Promise","resolve","AUTH_LOGOUT","removeItem","AUTH_ERROR","status","reject","AUTH_CHECK","getItem","withStyles","link","textDecoration","icon","width","paddingLeft","_ref","_ref$record","record","source","classes","href","Launch_default","UserList","props","List","Datagrid","rowClick","TextField","EmailField","src_MyUrlField_MyUrlField","PostFilter","Filter","TextInput","label","alwaysOn","ReferenceInput","reference","allowEmpty","SelectInput","optionText","PostList","Object","assign","filters","Posts_PostFilter","Responsive","small","SimpleList","primaryText","title","secondaryText","concat","views","tertiaryText","Date","published_at","toLocaleDateString","medium","ReferenceField","EditButton","PostTitle","PostEdit","Edit","SimpleForm","DisabledInput","LongTextInput","PostCreate","Create","dataProvider","jsonServerProvider","App","Admin","dashboard","authProvider","Resource","name","list","edit","create","PostIcon","UserIcon","Boolean","window","location","hostname","match","ReactDOM","render","src_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.159cba27.chunk.js","sourcesContent":["import React from 'react';\n\nimport './index.scss';\n\nconst Dashboard = () => (\n  <div className=\"dashboard\">\n    Removido opção do card do material-ui pois o mesmo esta quebrado dentro da\n    aplicação pois não esta achando a variavel <strong>@global</strong>, quando é feito o build da aplicação.\n  </div>\n);\n\nexport default Dashboard;\n","import {\n  AUTH_LOGIN,\n  AUTH_LOGOUT,\n  AUTH_ERROR,\n  AUTH_CHECK,\n} from 'react-admin';\n\nexport default (type, params) => {\n  if (type === AUTH_LOGIN) {\n    const { username } = params;\n    localStorage.setItem('username', username);\n    return Promise.resolve();\n  }\n\n  if (type === AUTH_LOGOUT) {\n    localStorage.removeItem('username');\n    return Promise.resolve();\n  }\n\n  if (type === AUTH_ERROR) {\n    const { status } = params;\n    if (status === 401 || status === 403) {\n      localStorage.removeItem('username');\n      return Promise.reject();\n    }\n\n    return Promise.resolve();\n  }\n\n  if (type === AUTH_CHECK) {\n    return localStorage.getItem('username')\n      ? Promise.resolve()\n      : Promise.reject();\n  }\n\n  return Promise.reject('Unknown method');\n};\n","import React from 'react';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport LaunchIcon from '@material-ui/icons/Launch';\n\nconst styles = {\n  link: {\n    textDecoration: 'none',\n  },\n  icon: {\n    width: '0.5em',\n    paddingLeft: 2,\n  },\n};\n\nconst MyUrlField = ({ record = {}, source, classes }) => (\n  <a href={record[source]} className={classes.link}>\n    {record[source]}\n    <LaunchIcon className={classes.icon} />\n  </a>\n);\n\nexport default withStyles(styles)(MyUrlField);\n","import React from 'react';\nimport {\n  List,\n  Datagrid,\n  TextField,\n  EmailField,\n} from 'react-admin';\nimport MyUrlField from '../MyUrlField/MyUrlField';\n\nconst UserList = props => (\n  <List {...props}>\n    <Datagrid rowClick=\"edit\">\n      <TextField source=\"name\" />\n      <EmailField source=\"email\" />\n      <TextField source=\"phone\" />\n      <MyUrlField source=\"website\" />\n      <TextField source=\"company.name\" />\n    </Datagrid>\n  </List>\n);\n\nexport default UserList;\n","import React from 'react';\n\nimport './index.scss';\n\nimport {\n  List,\n  Responsive,\n  SimpleList,\n  Datagrid,\n  TextField,\n  ReferenceField,\n  EditButton,\n  Filter,\n  TextInput,\n  ReferenceInput,\n  SelectInput,\n} from \"react-admin\";\n\nconst PostFilter = props => (\n  <Filter {...props}>\n    <TextInput label=\"search\" source=\"q\" alwaysOn />\n    <ReferenceInput label=\"User\" source=\"userId\" reference=\"users\" allowEmpty>\n      <SelectInput optionText=\"name\" />\n    </ReferenceInput>\n  </Filter>\n);\n\nconst PostList = props => (\n  <List {...props} filters={<PostFilter />}>\n    <Responsive\n      small={\n        <SimpleList\n          primaryText={record => record.title}\n          secondaryText={record => `${record.views} views`}\n          tertiaryText={record =>\n            new Date(record.published_at).toLocaleDateString()\n          }\n        />\n      }\n      medium={\n        <Datagrid rowClick=\"edit\">\n          <ReferenceField source=\"userId\" reference=\"users\">\n            <TextField source=\"name\" />\n          </ReferenceField>\n          <TextField source=\"title\" />\n          <TextField source=\"body\" />\n          <EditButton />\n        </Datagrid>\n      }\n    />\n  </List>\n);\n\n\nexport default PostList;\n","import React from 'react';\n\nimport {\n  Edit,\n  SimpleForm,\n  DisabledInput,\n  SelectInput,\n  ReferenceInput,\n  TextInput,\n  LongTextInput,\n} from 'react-admin';\n\nconst PostTitle = ({ record }) => `Post: ${record ? record.title : ''}`;\n\nconst PostEdit = props => (\n  <Edit title={<PostTitle />} {...props}>\n    <SimpleForm>\n      <DisabledInput source=\"id\" />\n\n      <ReferenceInput source=\"userId\" reference=\"users\">\n        <SelectInput optionText=\"name\" />\n      </ReferenceInput>\n\n      <TextInput source=\"title\" />\n      <LongTextInput source=\"body\" />\n    </SimpleForm>\n  </Edit>\n);\n\nexport default PostEdit;\n","import React from 'react';\n\nimport {\n  Create,\n  SimpleForm,\n  ReferenceInput,\n  SelectInput,\n  TextInput,\n  LongTextInput,\n} from 'react-admin';\n\nconst PostCreate = props => (\n  <Create {...props}>\n    <SimpleForm>\n      <ReferenceInput source=\"userId\" reference=\"users\">\n        <SelectInput optionText=\"name\" />\n      </ReferenceInput>\n      <TextInput source=\"title\" />\n      <LongTextInput source=\"body\" />\n    </SimpleForm>\n  </Create>\n);\n\nexport default PostCreate;\n","import React from 'react';\n\nimport jsonServerProvider from 'ra-data-json-server';\n\nimport { Admin, Resource } from 'react-admin';\nimport PostIcon from '@material-ui/icons/Book';\nimport UserIcon from '@material-ui/icons/Group';\n\nimport Dashboard from '../Dashobard/Dashboard';\nimport AuthProvider from '../Login/AuthProvider';\nimport UserList from '../User/Users';\nimport PostList from '../Post/Posts';\nimport PostEdit from '../Post/PostEdit';\nimport PostCreate from '../Post/PostCreate';\n\n\nimport './App.css';\n\nconst dataProvider = jsonServerProvider('http://jsonplaceholder.typicode.com');\n\nconst App = () => (\n  <Admin dashboard={Dashboard} authProvider={AuthProvider} dataProvider={dataProvider}>\n    <Resource name=\"posts\" list={PostList} edit={PostEdit} create={PostCreate} icon={PostIcon} />\n    <Resource name=\"users\" list={UserList} icon={UserIcon} />\n  </Admin>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}